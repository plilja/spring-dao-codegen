entity.output_folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
entity.output_package=dbtests.h2.model
entity.output_prefix=
entity.created_at_name=created_at
entity.changed_at_name=changed_at
entity.created_by_name=created_by
entity.changed_by_name=changed_by
entity.version_name=version
dao.output_folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
dao.output_package=dbtests.h2.model
dao.output_prefix=
dao.output_suffix=Repo
dao.max_select_count=10
framework.output_folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
framework.output_package=dbtests.framework
# Yes we use Postgres. The use case is to generate the daos
# from a "real" database and then have the daos and
# entities compatible with H2 in tests
database.driver=org.postgresql.Driver
database.url=jdbc:postgresql://localhost:4007/docker
database.user=docker
database.password=docker
database.dialect=POSTGRES
test.resource_folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/resources
enum.table_regex=.*enum.*
enum.name_column_regex=.*name.*
features.generate_javax_validation=true
features.generate_jackson_annotations=true
features.generate_change_tracking=true
features.generate_test_ddl=true
