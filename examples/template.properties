# Optional property (default=false). Activates JPA-like features like @LastModifiedBy,
# @CreatedBy, etc.
features.generate_change_tracking=true

# Optional property (default=false). Generate a test DDL script that can be used to create a 
# H2 test database.
features.generate_test_ddl=true

# Optional property (default=false). Generate some Javax validation annotations on generated
# entities.
features.generate_jackson_annotations=true

# Mandatory property. Determines the folder where generated entities will be created. 
# This should point to the root of your project/module. The sub folder 
# structure for the package name will be added automatically. 
entity.output_folder=/path/to/your/project/src/main/java

# Mandatory property. Package for generated entities.
entity.output_package=dbtests.postgres.model

# Optional property (default=empty). If defined, all generated entities will be 
# prefixed by this value.
entity.output_prefix=

# Optional property (default=empty). If defined, all generated entities will have
# this value added to the end of their name.
entity.output_suffix=

# Optional properties (default=empty). If you wan't to use change tracking 
# (@LastModifiedBy, @CreatedBy, etc in JPA) you should supply 
# a comma separated list of column names for the respective column here.
# Please note that you also need to set the feature property (change tracking) to activate this feature.
entity.created_at_name=created_at
entity.changed_at_name=changed_at
entity.created_by_name=created_by
entity.changed_by_name=changed_by

# Optional property (default=empty). If you wan't to use optimistic locking
# (@Version in JPA) you should supply a comma separated list of version column names.
# Please note that you also need to set the feature property (change tracking) to activate this feature.
entity.version_name=counter

# Mandatory property. Determines the folder where generated DAO's will be created. 
# This should point to the root of your project/module. The sub folder 
# structure for the package name will be added automatically. 
dao.output_folder=/path/to/your/project/src/test/java

# Mandatory property. Package for generated DAO's.
dao.output_package=dbtests.postgres.model

# Optional property (default=1500). Safe guard agains queries unexpectedly 
# returning a larger count than expected thereby degrading performance or
# causing memory to run out.
dao.max_select_count=1500

# Mandatory property. Determines the folder where generated framework will be created. 
# This should point to the root of your project/module. The sub folder 
# structure for the package name will be added automatically. 
framework.output_folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java

# Mandatory property. Package for generated framework.
framework.output_package=dbtests.framework

# Optional property. If defined, a schema script that can
# be used to create a H2 database will be created with this name.
# Please note that you also need to set the feature property above to activate this feature.
test.ddl_file_name=init-h2.sql

# Optional property. Determines the folder where H2 schema script will be created. 
# Only relevant if a H2 schema script is being created.
test.resource_folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/resources

# Mandatory property. Database driver. Valid values are:
# org.postgresql.Driver
# oracle.jdbc.OracleDriver
# com.mysql.jdbc.Driver
# com.microsoft.sqlserver.jdbc.SQLServerDriver
database.driver=org.postgresql.Driver

# Mandatory property. Database connection string. 
database.url=jdbc:postgresql://somehost.com:5432/yourdatabase
database.user=username
database.password=yourPassword

# Mandatory property. Database dialect. Valid values are:
# MYSQL
# MSSQL_SERVER
# ORACLE
# ORACLE12 (if you are using a newer version of Oracle database)
# POSTGRES
database.dialect=POSTGRES

# Optional property. If defined, table names that match this property
# will be treated as enums and their contents will be generated to
# a Java enum class. If not defined, no tables will be considered to
# be enums.
enum.table_regex=.*enum.*

# Optional property. If defined (in combination with the above property),
# any column that matches this property will be used for naming generated 
# enum constants.
enum.name_column_regex=.*name.*

# Optional property. A comma separated list of tables names. If defined, only tables in this
# list will be considered for generation. Useful if you have a large database and only want 
# to consider a small portion of it. If not defined, all tables will be considered.
database.include_tables=

# Optional property. A comma separated list of tables names. If defined, these tables
# will not be considered. If not defined, all tables will be considered.
database.exclude_table=TABLE_THAT_WONT_BE_CONSIDERED
