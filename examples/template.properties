# Optional property (default=false). Activates JPA-like features like @LastModifiedBy,
# @CreatedBy, etc.
features.generate_change_tracking=true

# Optional property (default=false). Generate a test DDL script that can be used to create a 
# H2 test database.
features.generate_test_ddl=true

# Optional property (default=false). Generate Javax validation annotations on generated
# entities.
features.generate_javax_validation=true

# Optional property (default=true). Generate some Javax validation annotations on generated
# entities.
features.generate_jackson_annotations=true

# Optional property (default=false). If true, generated entities will use Lombok to reduce
# boilerplate and create hashCode and equals methods. If false, generated entities will be
# plain old Java objects with the default (referential) hashCode and equals methods.
features.use_lombok=true

# Optional property (default=true). Generate an API for performing dynamic queries.
# If you want your DAO classes to be stupid you should set this to false. Using this
# feature means that some queries will be generated at runtime. 
# Note: If you want to generate classes for database views this feature needs to
# be enabled. 
features.generate_query_api=true

# Mandatory property. Determines the folder where generated entities will be created. 
# This should point to the root of your project/module. The sub folder 
# structure for the package name will be added automatically. 
entity.output_folder=/path/to/your/project/src/main/java

# Mandatory property. Package for generated entities.
entity.output_package=dbtests.postgres.model

# Optional property (default=empty). All generated entities will have
# this value added to the start of their name.
entity.output_prefix=

# Optional property (default=empty). All generated entities will have
# this value added to the end of their name.
entity.output_suffix=

# Optional properties (default=empty). If you wan't to use change tracking 
# (@LastModifiedBy, @CreatedBy, etc in JPA) you should supply 
# a comma separated list of column names for the respective column here.
# Please note that you also need to set the feature property (change tracking) to activate this feature.
entity.created_at_name=created_at
entity.changed_at_name=changed_at
entity.created_by_name=created_by
entity.changed_by_name=changed_by

# Optional property (default=empty). If you wan't to use optimistic locking
# (@Version in JPA) you should supply a comma separated list of version column names.
# Please note that you also need to set the feature property (change tracking) to activate this feature.
entity.version_name=counter

# Mandatory property. Determines the folder where generated DAO's will be created. 
# This should point to the root of your project/module. The sub folder 
# structure for the package name will be added automatically. 
dao.output_folder=/path/to/your/project/src/test/java

# Mandatory property. Package for generated DAO's.
dao.output_package=dbtests.postgres.model

# Optional property (default=1500). Safe guard agains queries unexpectedly 
# returning a larger count than expected thereby degrading performance or
# causing memory to run out.
dao.max_select_count=1500

# Optional property (default=empty). All generated Daos will have this
# value added to the start of their name.
dao.output_prefix=

# Optional property (default=Dao). All generated Daos will have
# this value added to the end of their name.
dao.output_suffix=

# Optional property (default=false). If true, the generated Daos will
# be abstract classes. This might be usable if you want to write custom queries
# in subclasses and retain the possiblity to regenerate the abstract class. It 
# will however increase complexity.
dao.generate_abstract=false

# Optional property (default=empty). All generated Views will have this
# value added to the start of their name.
view.output_prefix=

# Optional property (default=View). All generated Views will have
# this value added to the end of their name.
view.output_suffix=

# Mandatory property. Determines the folder where generated framework will be created. 
# This should point to the root of your project/module. The sub folder 
# structure for the package name will be added automatically. 
framework.output_folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java

# Mandatory property. Package for generated framework.
framework.output_package=dbtests.framework

# Optional property. If defined, a schema script that can
# be used to create a H2 database will be created with this name.
# Please note that you also need to set the feature property above to activate this feature.
test.ddl_file_name=init-h2.sql

# Optional property. Determines the folder where H2 schema script will be created. 
# Only relevant if a H2 schema script is being created.
test.resource_folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/resources

# Mandatory property. Database driver. Valid values are:
# org.postgresql.Driver
# oracle.jdbc.OracleDriver
# com.mysql.jdbc.Driver
# com.microsoft.sqlserver.jdbc.SQLServerDriver
database.driver=org.postgresql.Driver

# Mandatory property. Database connection string. 
database.url=jdbc:postgresql://somehost.com:5432/yourdatabase
database.user=username
database.password=yourPassword

# Mandatory property. Database dialect. Valid values are:
# MYSQL
# MSSQL_SERVER
# ORACLE
# ORACLE12 (if you are using a newer version of Oracle database)
# POSTGRES
database.dialect=POSTGRES

# Optional property (default=empty). A comma separated list of schema names. If 
# defined, only tables belong to these schemas will be considered. Default is to consider
# all schemas available through the connection string.
database.schemas=

# Optional property. A comma separated list of tables names. If defined, only tables in this
# list will be considered for generation. Useful if you have a large database and only want 
# to consider a small portion of it. If not defined, all tables will be considered.
database.include_tables=

# Optional property. A comma separated list of tables names. If defined, these tables
# will not be considered. If not defined, all tables will be considered.
database.exclude_table=TABLE_THAT_WONT_BE_CONSIDERED

# Optional property. If defined, table names that match this property
# will be treated as enums and their contents will be generated to
# a Java enum class. If not defined, no tables will be considered to
# be enums.
enum.table_regex=.*enum.*

# Optional property. If defined (in combination with the above property),
# any column that matches this property will be used for naming generated 
# enum constants.
enum.name_column_regex=.*name.*

# Optional property (default=empty). A list of tables to be considered as
# enums. This is a complementary feature to the "enum.name_column_regex"-property.
# This us usable if you haven't established a naming strategy for you enum tables.
enum.tables=.*name.*

# Optional property (default=11). Determines Java version of generated output.
java.version=1.8

# Optional property (default=empty). Tables defined here will be considered to have a generated
# primary key even though it looks in the schema like they don't. This is probably only usable
# if your are using an older Oracle version where you might have emulated a generated key
# through triggers. For modern databases this should not be needed.
generated_primary_keys_override=SOME_ORACLE_TABLE
