#entity.output.folder=/Users/patrik/IdeaProjects/springdaogen/src/main/kotlin
#entity.output.package=generated.entity
#dao.output.folder=/Users/patrik/IdeaProjects/springdaogen/src/main/kotlin
#dao.output.package=generated.dao
#framework.output.folder=/Users/patrik/IdeaProjects/springdaogen/src/main/kotlin
#framework.output.package=generated.framework
#max.select.all.count=2000
#database.driver=org.postgresql.Driver
#database.url=jdbc:postgresql://localhost:4003/docker
#database.user=docker
#database.password=docker
#database.dialect=POSTGRES
#database.name=docker

#entity.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
#entity.output.package=dbtests.oracle
#dao.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
#dao.output.package=dbtests.oracle
#framework.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
#framework.output.package=dbtests.framework
#max.select.all.count=10
#database.driver=oracle.jdbc.OracleDriver
#database.url=jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS_LIST =(ADDRESS =(PROTOCOL=TCP)(HOST=localhost)(PORT=4006)))(CONNECT_DATA=(SID=xe)(GLOBAL_NAME=xe.WORLD)(SERVER=DEDICATED)))
#database.user=docker
#database.password=password
#database.dialect=ORACLE
#database.name=docker
#database.schemas=docker
#entity.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
#entity.output.package=dbtests.mssql
#dao.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
#dao.output.package=dbtests.mssql
#framework.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
#framework.output.package=dbtests.framework
#max.select.all.count=10
#database.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver
#database.url=jdbc:sqlserver://localhost:4005;databaseName=docker;
#database.user=sa
#database.password=superSecure123
#database.dialect=MSSQL_SERVER
# Precision needed for SQL server since SchemaCrawler otherwise finds system tables
#database.name=docker
#database.schemas=docker.dbo
#use_lombok=true
#entity.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
#entity.output.package=dbtests.mysql.model
#entity.output.prefix=M
#dao.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
#dao.output.package=dbtests.mysql.model
#dao.output.prefix=M
#dao.output.suffix=Repo
#framework.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
#framework.output.package=dbtests.framework
#max.select.all.count=10
#database.driver=com.mysql.jdbc.Driver
#database.url=jdbc:mysql://localhost:4004/docker
#database.user=docker
#database.password=docker
#database.dialect=MYSQL
#database.name=docker
#test.generate_ddl=true
#test.resource_folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/resources
entity.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
entity.output.package=dbtests.h2.model
entity.output.prefix=
dao.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
dao.output.package=dbtests.h2.model
dao.output.prefix=
dao.output.suffix=Repo
framework.output.folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/java
framework.output.package=dbtests.framework
max.select.all.count=10
# Yes we use Postgres. The use case is to generate the daos
# from a "real" database and then have the daos and
# entities compatible with H2 in tests
database.driver=org.postgresql.Driver
database.url=jdbc:postgresql://localhost:4007/docker
database.user=docker
database.password=docker
database.dialect=POSTGRES
database.name=docker
test.generate_ddl=true
test.resource_folder=/Users/patrik/IdeaProjects/springdaogen/integrationtests/src/test/resources
